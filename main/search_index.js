var documenterSearchIndex = {"docs":
[{"location":"contr_dev_workflow/#Development/GitHub-Workflow","page":"Developer Workflow","title":"Development/GitHub Workflow","text":"","category":"section"},{"location":"contr_dev_workflow/","page":"Developer Workflow","title":"Developer Workflow","text":"The following documentation is based on the BestieTemplate.jl developer documentation, but has been adapted to our needs.  ","category":"page"},{"location":"contr_dev_workflow/#Before-you-start-coding","page":"Developer Workflow","title":"Before you start coding","text":"","category":"section"},{"location":"contr_dev_workflow/","page":"Developer Workflow","title":"Developer Workflow","text":"Check if a GitHub issue exists for the topic (e.g. bug, new feature, etc.). If not, create one with a brief description of the problem or feature idea.\nDiscuss your approach with the maintainers, either in the issue or through another channel.","category":"page"},{"location":"contr_dev_workflow/#First-time-clone-and-development-version","page":"Developer Workflow","title":"First time clone & development version","text":"","category":"section"},{"location":"contr_dev_workflow/","page":"Developer Workflow","title":"Developer Workflow","text":"Follow the instructions below to clone the repository and create a `dev' version if you are working with this repository for the first time.","category":"page"},{"location":"contr_dev_workflow/","page":"Developer Workflow","title":"Developer Workflow","text":"tip: `dev` version of a Julia package\nHaving a dev (development) version of a Julia package allows you to import a local version of the package with your changes instead of the registered package version (which is static).","category":"page"},{"location":"contr_dev_workflow/#a)-If-you-have-writing-access-to-the-GitHub-repository","page":"Developer Workflow","title":"a) If you have writing access to the GitHub repository","text":"","category":"section"},{"location":"contr_dev_workflow/","page":"Developer Workflow","title":"Developer Workflow","text":"(UnfoldSim is used as an example)  ","category":"page"},{"location":"contr_dev_workflow/","page":"Developer Workflow","title":"Developer Workflow","text":"Option 1: Clone this repository using git clone.\nOption 2 (recommended): Use the Julia dev command to create a development version of the package:\nStart a Julia session and run cd(\"/path/to/your/project\") to navigate to your project folder.\nPress ] to enter pkg mode.\nRun dev --local UnfoldSim to clone the package to ./dev/UnfoldSim and automatically add it to your Julia project environment.","category":"page"},{"location":"contr_dev_workflow/","page":"Developer Workflow","title":"Developer Workflow","text":"important: Important\nIf you have writing rights, whenever upstream is mentioned below, use origin instead.","category":"page"},{"location":"contr_dev_workflow/#b)-If-you-don't-have-writing-access-for-the-GitHub-repository","page":"Developer Workflow","title":"b) If you don't have writing access for the GitHub repository","text":"","category":"section"},{"location":"contr_dev_workflow/","page":"Developer Workflow","title":"Developer Workflow","text":"Fork the UnfoldSim.jl repository.\nClone your repository (this will create a git remote called origin).\nAdd the UnfoldSim.jl repository as a remote:\ngit remote add upstream https://github.com/unfoldtoolbox/UnfoldSim.jl","category":"page"},{"location":"contr_dev_workflow/","page":"Developer Workflow","title":"Developer Workflow","text":"This will ensure that you have two remotes in your git: origin and upstream. You will create branches and push to origin, and you will fetch and update your local main branch from upstream.","category":"page"},{"location":"contr_dev_workflow/","page":"Developer Workflow","title":"Developer Workflow","text":"tip: `dev` version without writing rights\nYou can also use the dev command on your fork. Run ]dev --local url/of/your/fork to clone the package to ./dev/UnfoldSim and automatically add it to your Julia project environment.","category":"page"},{"location":"contr_dev_workflow/#Revise.jl","page":"Developer Workflow","title":"Revise.jl","text":"","category":"section"},{"location":"contr_dev_workflow/","page":"Developer Workflow","title":"Developer Workflow","text":"Further, we recommend to use Revise.jl: a Julia package which allows you to track source code changes in a running Julia session without need to restart it and reload the package.","category":"page"},{"location":"contr_dev_workflow/","page":"Developer Workflow","title":"Developer Workflow","text":"We recommend to install it in the global environment:","category":"page"},{"location":"contr_dev_workflow/","page":"Developer Workflow","title":"Developer Workflow","text":"julia> # Press ]\npkg> activate\npkg> add Revise","category":"page"},{"location":"contr_dev_workflow/","page":"Developer Workflow","title":"Developer Workflow","text":"If you added Revise.jl globally, it's generally a good idea to start the package at Julia startup. To do this you just have to create/find your .julia/config/startup.jl and add using Revise to it.","category":"page"},{"location":"contr_dev_workflow/#Working-on-a-new-issue","page":"Developer Workflow","title":"Working on a new issue","text":"","category":"section"},{"location":"contr_dev_workflow/","page":"Developer Workflow","title":"Developer Workflow","text":"We try to keep a linear Git history in this repository, so it is important to keep your branches up-to-date.","category":"page"},{"location":"contr_dev_workflow/","page":"Developer Workflow","title":"Developer Workflow","text":"Fetch from the remote and fast-forward your local main\ngit fetch upstream\ngit switch main\ngit merge --ff-only upstream/main\nBranch from main to address the issue (see below for naming)\ngit switch -c 42-add-answer-universe\nPush the new local branch to your personal remote repository\ngit push -u origin 42-add-answer-universe\nCreate a pull request to merge your remote branch into the main branch of the original UnfoldSim.jl repository.","category":"page"},{"location":"contr_dev_workflow/#Branch-naming","page":"Developer Workflow","title":"Branch naming","text":"","category":"section"},{"location":"contr_dev_workflow/","page":"Developer Workflow","title":"Developer Workflow","text":"If there is an associated issue, add the issue number.\nIf there is no associated issue, and the changes are small, add a prefix such as \"typo\", \"hotfix\", \"small-refactor\", according to the type of update.\nIf the changes are not small and there is no associated issue, then either create an issue first, or discuss in another channel with the maintainers.\nUse dash separated imperative wording related to the issue (e.g., 14-add-tests, 15-fix-model, 16-remove-obsolete-files).","category":"page"},{"location":"contr_dev_workflow/#Commit-messages","page":"Developer Workflow","title":"Commit messages","text":"","category":"section"},{"location":"contr_dev_workflow/","page":"Developer Workflow","title":"Developer Workflow","text":"Please refrain from making huge commits; rather make smaller commits for specific changes.\nUse imperative or present tense, for instance: Add feature or Fix bug.\nHave informative titles (i.e. do not: fix UnfoldSim; do: fix issue creating events).\nWhen necessary, add a body with details.\nIf there are breaking changes, add the information to the commit message.","category":"page"},{"location":"contr_dev_workflow/#Before-creating-a-pull-request","page":"Developer Workflow","title":"Before creating a pull request","text":"","category":"section"},{"location":"contr_dev_workflow/","page":"Developer Workflow","title":"Developer Workflow","text":"Make sure the tests pass (see Testing).\nAdd appropriate documentation (ideally using the Docstring templates).\nFollow the formatting rules from JuliaFormatter.jl (see Formatting).\nFetch any main updates from upstream and rebase your branch, if necessary:\ngit fetch upstream\ngit rebase upstream/main BRANCH_NAME\nThen you can open a pull request and work with the reviewer to address any issues.","category":"page"},{"location":"contr_dev_workflow/#Working-with-a-pull-request","page":"Developer Workflow","title":"Working with a pull request","text":"","category":"section"},{"location":"contr_dev_workflow/","page":"Developer Workflow","title":"Developer Workflow","text":"Ideally, one pull request should solve one problem. Otherwise, it becomes difficult to review and track changes.","category":"page"},{"location":"contr_dev_workflow/","page":"Developer Workflow","title":"Developer Workflow","text":"Written by Judith Schepers.","category":"page"},{"location":"contr_docs/#Documentation","page":"Documentation","title":"Documentation","text":"","category":"section"},{"location":"contr_docs/","page":"Documentation","title":"Documentation","text":"Documentation is key to maintaining a codebase that is easy to understand and extend. Whether it is comments in the code, docstrings, or tutorials, when writing documentation,  think about your future self or the next person who will read your code or use your functions.","category":"page"},{"location":"contr_docs/#Building-and-viewing-the-documentation-locally","page":"Documentation","title":"Building and viewing the documentation locally","text":"","category":"section"},{"location":"contr_docs/","page":"Documentation","title":"Documentation","text":"We recommend using LiveServer.jl to build and preview the documentation locally. To simplify this process we created the docs/run_liveserver.jl script.","category":"page"},{"location":"contr_docs/","page":"Documentation","title":"Documentation","text":"Please follow these steps:","category":"page"},{"location":"contr_docs/","page":"Documentation","title":"Documentation","text":"Navigate to the docs folder and activate it.\nRun using Revise.\nIf this is the first time building the docs\nPress ] to enter pkg mode.\nRun pkg> dev .. to use the development version of your package.\nPress backspace to leave pkg mode.\nRun include(\"run_liveserver.jl\").\nClick on the provided link or go to http://0.0.0.0:8000/ in your browser.","category":"page"},{"location":"contr_docs/","page":"Documentation","title":"Documentation","text":"tip: Live preview of docstrings\nInstall Revise.jl in the docs environment to enable live updating of docstrings in the docs preview.","category":"page"},{"location":"contr_docs/","page":"Documentation","title":"Documentation","text":"tip: Separate Julia session for docs preview\nWe recommend using a separate Julia session (in VSCode) to run the run_liveserver.jl script, as it continues running. This way, you can avoid \"blocking\" the REPL and run other code in the meantime.","category":"page"},{"location":"contr_docs/#Adding-a-documentation-page","page":"Documentation","title":"Adding a documentation page","text":"","category":"section"},{"location":"contr_docs/","page":"Documentation","title":"Documentation","text":"We recommend to write Literate.jl document and place it in docs/literate/FOLDER/FILENAME.jl with FOLDER being HowTo, Explanation, Tutorial or Reference (recommended reading on the 4 categories).\nLiterate.jl converts the .jl file to a .md automatically and places it in docs/src/generated/FOLDER/FILENAME.md.\nEdit make.jl with a reference to docs/src/generated/FOLDER/FILENAME.md.","category":"page"},{"location":"contr_docs/#Docstring-templates","page":"Documentation","title":"Docstring templates","text":"","category":"section"},{"location":"contr_docs/","page":"Documentation","title":"Documentation","text":"The following docstring templates are mainly based on the Julia manual and Blue: a Style Guide for Julia.","category":"page"},{"location":"contr_docs/#Function-docstring-template","page":"Documentation","title":"Function docstring template","text":"","category":"section"},{"location":"contr_docs/","page":"Documentation","title":"Documentation","text":"\"\"\"\n    my_function(argument1:Type1; keyword_argument3::Type3 = value3)\n    my_function(argument1::Type1, optional_argument2::Type2; keyword_argument3::Type3 = value3)\n\nOne-line description using the imperative form (\"Do this\") instead of the third person and ending with a period.\n\nIf the one-line description is not sufficient, one can also write a short paragraph with additional information.\n\n# Arguments (if needed)\n- `argument1::Type1`: Description of argument1.\n- `optional_argument2::Type2` (optional): Description of optional_argument2.\n\n# Keyword arguments (if needed)\n- `keyword_argument3::Type3 = value3`: Description of keyword_argument3.\n\n# Returns\n- `result::Type4` : Description of result.\n\n# Examples\n```julia-repl\njulia> my_function(value1, value2)\nresult1\n\njulia> my_function(value1; keyword_argument3 = value4)\nresult2\n```\n\nSee also [`my_function2`](@ref), [`my_function3`](@ref).\n\"\"\"","category":"page"},{"location":"contr_docs/","page":"Documentation","title":"Documentation","text":"Special cases:","category":"page"},{"location":"contr_docs/","page":"Documentation","title":"Documentation","text":"If a function accepts many keyword arguments, only include <keyword arguments> as a placeholder in the signature and give a keyword list with descriptions in the Keyword arguments section of the docstring.\nIf a function returns more than one variable, write the Returns section in the following way:\n# Returns\n- (result1, result2)::Tuple{Type1, Type2}:\n    - Description of result1\n    - Description of result2","category":"page"},{"location":"contr_docs/#Type-docstring-template","page":"Documentation","title":"Type docstring template","text":"","category":"section"},{"location":"contr_docs/","page":"Documentation","title":"Documentation","text":"\"\"\"\n    MyType <: MyAbstractType\n\nOne-line desciption of my type which ends with a period.\n\nIf the one-line description is not sufficient, one can also write a short paragraph with additional information.\n\n# Fields\n- `field1::Type1`: Description of field1.\n- `optional_field2::Type2 = value2` (optional): Description of field2. If not provided, defaults to `value2`.\n\n# Examples\n```julia-repl\njulia> MyType(field1, field2)\nresult1\n```\n\nSee also [`MyType2`](@ref), [`my_function2`](@ref).\n\"\"\"","category":"page"},{"location":"contr_docs/","page":"Documentation","title":"Documentation","text":"Written by Judith Schepers.","category":"page"},{"location":"why_julia/#Why-Julia?","page":"Why Julia?","title":"Why Julia?","text":"","category":"section"},{"location":"why_julia/","page":"Why Julia?","title":"Why Julia?","text":"Some of you may ask, why Julia? Was Matlab-Unfold not good enough?","category":"page"},{"location":"why_julia/","page":"Why Julia?","title":"Why Julia?","text":"There are two main answers, one specific to Unfold, one more general.","category":"page"},{"location":"why_julia/","page":"Why Julia?","title":"Why Julia?","text":"Initially and specifically to Unfold.jl was the impossibility to adapt many LMMs to Matlab (we tried). Julia's MixedModels.jl results in up to 100x speedup (compared to R's LME4). ","category":"page"},{"location":"why_julia/","page":"Why Julia?","title":"Why Julia?","text":"More generally, we came up with a list of things that make Julia exceptionally well suited for science:","category":"page"},{"location":"why_julia/","page":"Why Julia?","title":"Why Julia?","text":"🚀 Easy to write fast code. Solves the 2-language problem: you have simple python-like code, but at the speed of mex/numba/cython. This allows \"normal\" scientists to produce efficient code without needing the C++ skills.\n🤝 Easy interoperability with Python, R, and Matlab. If a library does not exist in Julia, simply call it from another language.\n📦 Built-in reproducible package management. Think of Python's conda-env, but actually working & fast.\n🈳 Built-in support for unicode via latex \\beta=𝛽.\n🔤 Syntax is easy, a mix of R/MatLab/Python.","category":"page"},{"location":"why_julia/#Compared-to-MatLab","page":"Why Julia?","title":"Compared to MatLab","text":"","category":"section"},{"location":"why_julia/","page":"Why Julia?","title":"Why Julia?","text":"All of the above, but in addition:","category":"page"},{"location":"why_julia/","page":"Why Julia?","title":"Why Julia?","text":"💸 It is free.\n✅ Automated unit testing and documentation are much easier.","category":"page"},{"location":"why_julia/#Compared-to-Python","page":"Why Julia?","title":"Compared to Python","text":"","category":"section"},{"location":"why_julia/","page":"Why Julia?","title":"Why Julia?","text":"All of the above, but in addition:","category":"page"},{"location":"why_julia/","page":"Why Julia?","title":"Why Julia?","text":"🧮 LinearAlgebra integrated. No more np.diff(np.mult(A,B)) etc.","category":"page"},{"location":"comparison/#Regression-ERP-and-Temporal-Response-Function-toolboxes","page":"Other rERP/TRF packages","title":"Regression ERP and Temporal Response Function toolboxes","text":"","category":"section"},{"location":"comparison/","page":"Other rERP/TRF packages","title":"Other rERP/TRF packages","text":"This is a (likely incomplete) list of toolboxes dedicated to rERP/TRF analysis of EEG (and other modalities). Sorted by last updated (checked in Feb'25). ","category":"page"},{"location":"comparison/","page":"Other rERP/TRF packages","title":"Other rERP/TRF packages","text":"important: Important\nThis list is biased simply because the Unfold-Team created it. Please provide PRs if your package does not appear, has been updated or if the the labels are not representative to the toolbox.","category":"page"},{"location":"comparison/","page":"Other rERP/TRF packages","title":"Other rERP/TRF packages","text":"Toolbox Maintainer Published Updated Focus on Distinguishing features Language\nUnfold(.jl) Ehinger 2019 2025-01 rERP, deconv., TRF Formulas, non-linear splines, Mixed Models, speed julia, python, matlab\nEelbrain Brodbeck 2023 2025-01 TRF, deconv., rERP Formulas, Boosting python\nmTRFpy Bialas 2023 2024-12 TRFs (see mTRF) python\nmTRF Crosse 2016 2024-09 TRFs regularization, decoding matlab\nLIMO Pernet 2021 2024-06 rERP SPM-like, many statistical tests matlab","category":"page"},{"location":"comparison/#Inactive","page":"Other rERP/TRF packages","title":"Inactive","text":"","category":"section"},{"location":"comparison/","page":"Other rERP/TRF packages","title":"Other rERP/TRF packages","text":"The following toolboxes did not receive updates in the last years and we label them as inactive","category":"page"},{"location":"comparison/","page":"Other rERP/TRF packages","title":"Other rERP/TRF packages","text":"Toolbox Maintainer Published Updated Focus on Distinguishing features Language\nfitgrid Portnoy 2018 2022 rERP Formulas, Mixed Models python\nrERP eeglab Burns 2015 2015 rERP HED-tags matlab\nrERpy Smith 2015 2015 rERP  python","category":"page"},{"location":"code_style/#Clear-and-concise-Code","page":"Code Style","title":"Clear and concise Code","text":"","category":"section"},{"location":"code_style/","page":"Code Style","title":"Code Style","text":"Variables and Function Names should have meaningful names and we try to follow the Julia naming convention. Try to find names that are descriptive and domain specific, e.g. generate_events.\nTry to structure your program into meaningful subfunctions. As a rule of thumb, if your function is longer than 50 lines of code, has nested loops, nested if-else clauses, you'd better have a justification for it, or refactor it into smaller, reusable (and testable) functions.\nStructure your functions into multiple files, separated on a conceptual basis.\nTry to keep formatting consistent across all files.\nMinimize external dependencies. Use external libraries only when necessary to avoid compatibility issues and reduce installation and load times.\nComment your code, especially if the code is not self-explanatory.\nModularity: It's best if users can customize functionality without having to modify the package code. Good practices: avoid hardcoded parameters, make attributes (e.g. in figures) customizable, use inheritance from AbstractTypes.\nMost users will not check the defaults, make sure the defaults are sensible, potentially nudge users to provide their own with warnings.","category":"page"},{"location":"code_style/#Backward-compatibility","page":"Code Style","title":"Backward compatibility","text":"","category":"section"},{"location":"code_style/","page":"Code Style","title":"Code Style","text":"Ideally, new versions should produce the same results without any changes to the user's code. If not, a breaking release is required to indicate changed behavior.","category":"page"},{"location":"code_style/","page":"Code Style","title":"Code Style","text":"Maintain a clear changelog for new releases. Include down major and breaking changes, new features, documentation updates, and bug fixes.  Example.\nAvoid breaking changes when possible. The change is considered as breaking if you alter:","category":"page"},{"location":"code_style/","page":"Code Style","title":"Code Style","text":"function names;  \nargument names;  \noutput formats (e.g. switching from dict to vector).  ","category":"page"},{"location":"code_style/","page":"Code Style","title":"Code Style","text":"Use deprecation warnings. If a feature is going to be removed in a future release, use deprecation warnings (`@deprecate') to tell users what has changed and how to use the function now.","category":"page"},{"location":"code_style/#User-Friendliness-/-Documentation","page":"Code Style","title":"User-Friendliness / Documentation","text":"","category":"section"},{"location":"code_style/","page":"Code Style","title":"Code Style","text":"Every function exposed to the user should have docstrings specifying all parameters, their types, and input/output arguments. Check the Template.\nTry to organise your documentation based on four ways of documentation: tutorials, how-to's, explanation and reference documentation.\nTry to include visuals and code examples in the documentation.\nProvide meaningful error messages that guide users to solutions.\nIf possible, test the usability of your documentation with non-expert users to identify areas for improvement.","category":"page"},{"location":"code_style/","page":"Code Style","title":"Code Style","text":"Written by Vladimir Mikheev","category":"page"},{"location":"contr_overview/#Contribution-guide","page":"Overview","title":"Contribution guide","text":"","category":"section"},{"location":"contr_overview/","page":"Overview","title":"Overview","text":"Welcome to the developer documentation! We are excited that you are interested in contributing to our package.","category":"page"},{"location":"contr_overview/","page":"Overview","title":"Overview","text":"Contributions are very welcome. These could be typos, bug reports, feature requests, speed optimization, better code, and better documentation. You are very welcome to raise issues and start pull requests.","category":"page"},{"location":"contr_overview/","page":"Overview","title":"Overview","text":"important: Best practices not shackles\nWe encourage you to share your contributions in whatever state you are comfortable with. Don’t feel overwhelmed by the amount of guidelines and tipps we offer here — think of them as helpful resources, not strict requirements. Every contribution is valuable, and we’re happy to refine things together! ","category":"page"},{"location":"contr_overview/#Github-issues","page":"Overview","title":"Github issues","text":"","category":"section"},{"location":"contr_overview/","page":"Overview","title":"Overview","text":"We always appreciate people raising issues to improve our packages. If you find any such issue, please refrain from writing us directly and instead raise them on Github with a suitable tag in the respective package repository.","category":"page"},{"location":"contr_overview/#Bug-reports","page":"Overview","title":"Bug reports","text":"","category":"section"},{"location":"contr_overview/","page":"Overview","title":"Overview","text":"If you notice any bugs, such as crashing code, incorrect results or speed issues, please raise a GitHub issue with a \"bug\" tag. The issue should contain a short description of the problem, (optimally) a minimal working example to reproduce the bug and which UnfoldXYZ.jl version you are using.","category":"page"},{"location":"contr_overview/#Feature-requests","page":"Overview","title":"Feature requests","text":"","category":"section"},{"location":"contr_overview/","page":"Overview","title":"Overview","text":"If you find that any feature that you'd like to see in a given package is missing, you can raise an issue with the \"enhancement\" tag. We are always open to new suggestions and try to accomodate your ideas in a timely manner (where possible). Your feature request should ideally contain not only \"what\" you want, but also \"why\" you want it. And if you already have a solution to your problem, we would be grateful if you could post that as well. ;)","category":"page"},{"location":"contr_overview/#Documentation","page":"Overview","title":"Documentation","text":"","category":"section"},{"location":"contr_overview/","page":"Overview","title":"Overview","text":"If you notice anything within our Documentation, please use the \"documentation\" tag. These issues can contain anything from something not working/ not being displayed correctly, to a concept/ tutorial that is missing or currently hard to understand. We always try to make our documentation more accessible.","category":"page"},{"location":"contr_overview/#Code-contributions-(Pull-requests)","page":"Overview","title":"Code contributions (Pull requests)","text":"","category":"section"},{"location":"contr_overview/","page":"Overview","title":"Overview","text":"When opening a pull request, please add a short but meaningful description of the changes/features you implemented. Moreover, please add tests (where appropriate) to ensure that your code is working as expected.","category":"page"},{"location":"contr_overview/","page":"Overview","title":"Overview","text":"Please have a look at the developer documentation to learn more about the development workflow, formatting, testing and documentation.","category":"page"},{"location":"contr_overview/","page":"Overview","title":"Overview","text":"Written by Judith Schepers & René Skukies","category":"page"},{"location":"contr_testing/#Testing","page":"Testing","title":"Testing","text":"","category":"section"},{"location":"contr_testing/","page":"Testing","title":"Testing","text":"As with most Julia packages, you can just open Julia in the repository folder, activate the environment, and run test:","category":"page"},{"location":"contr_testing/","page":"Testing","title":"Testing","text":"julia> # press ]\npkg> activate .\npkg> test","category":"page"},{"location":"contr_testing/","page":"Testing","title":"Testing","text":"tip: Running single tests\nInstead of running all tests, you can also run the test/setup.jl to load all required packages, and subsequently run single tests manually either by include(\"test/my_test.jl\") or by opening the file and running the specific test block you want to run.","category":"page"},{"location":"contr_testing/","page":"Testing","title":"Testing","text":"Written by Judith Schepers.","category":"page"},{"location":"installation/#Installing-Julia-and-Unfold-Packages","page":"Installation","title":"Installing Julia & Unfold Packages","text":"","category":"section"},{"location":"installation/#Installing-Julia","page":"Installation","title":"Installing Julia","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"The recommended way to install julia is juliaup.","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"TL;DR: If you don't want to read the explicit instructions, just copy the following command:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"Windows: winget install julia -s msstore\nMac/Linux: curl -fsSL https://install.julialang.org | sh","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"We further recommend to use VSCode and install the Julia Extension.","category":"page"},{"location":"installation/#Installing-UnfoldXYZ.jl","page":"Installation","title":"Installing UnfoldXYZ.jl","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"The following instructions are intended for Julia beginners. More advanced Julia users can jump ahead to step 3.","category":"page"},{"location":"installation/#1.-Start-an-interactive-Julia-session-(\"REPL\")","page":"Installation","title":"1. Start an interactive Julia session (\"REPL\")","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"Option 1: Type julia in the command line.\nOption 2: In VSCode, press Ctrl + Shift + P to open the command palette and type in Julia: Start REPL.","category":"page"},{"location":"installation/#2.-Activate-your-project-environment","page":"Installation","title":"2. Activate your project environment","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"Before installing UnfoldXYZ.jl make sure that you activated your project environment.","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"Option 1: cd(\"/path/to/your/project\") and ]activate .\nOption 2: ]activate /path/to/your/project/","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"hint: Hint\nAfter activating you should see (environment) pkg> (where environment is the name of your project folder). If you see (@v1.11) pkg> instead, you still have to activate your environment.","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"Note that by typing ] you enter the Julia package manager. To get back to the Julia REPL, press backspace.","category":"page"},{"location":"installation/#3.-Install-the-UnfoldXYZ.jl-package","page":"Installation","title":"3. Install the UnfoldXYZ.jl package","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"If you are not in the package manager anymore, type ].\nThen type add UnfoldXYZ - e.g. add UnfoldSim.","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"After the installation is finished you can use using UnfoldXYZ in the REPL to import the package.","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"Written by Judith Schepers","category":"page"},{"location":"contr_formatting/#Formatting","page":"Formatting","title":"Formatting","text":"","category":"section"},{"location":"contr_formatting/#JuliaFormatter.jl","page":"Formatting","title":"JuliaFormatter.jl","text":"","category":"section"},{"location":"contr_formatting/","page":"Formatting","title":"Formatting","text":"We use JuliaFormatter.jl for formatting and recommend you to install it in your global environment:","category":"page"},{"location":"contr_formatting/","page":"Formatting","title":"Formatting","text":"julia> # Press ]\npkg> activate\npkg> add JuliaFormatter","category":"page"},{"location":"contr_formatting/#Beware-of-reviewdog","page":"Formatting","title":"Beware of reviewdog 🐶","text":"","category":"section"},{"location":"contr_formatting/","page":"Formatting","title":"Formatting","text":"We use the julia-format Github action to ensure that the code follows the formatting rules defined by JuliaFormatter.jl. When opening a pull request reviewdog will automatically make formatting suggestions for your code.","category":"page"},{"location":"contr_formatting/","page":"Formatting","title":"Formatting","text":"Written by Judith Schepers.","category":"page"},{"location":"#Unfold-Ecosystem","page":"Unfold Ecosystem","title":"Unfold Ecosystem","text":"","category":"section"},{"location":"","page":"Unfold Ecosystem","title":"Unfold Ecosystem","text":"The Unfold family is a set of time-series analysis, visualization, and simulation toolboxes built around the regression ERP (rERP) framework. That is, the application of multiple regression models to time series data. While all packages have a focus on EEG data, they can typically be easily applied to pupil dilation, skin conductance, or even fMRI data.","category":"page"},{"location":"","page":"Unfold Ecosystem","title":"Unfold Ecosystem","text":"<head>\n<style type=\"text/css\">\ntd {\n    text-align: right !important;\n    vertical-align: inherit !important;\n}\n</style></head>\n\n<div>\n<table style=\"margin: 0px auto;\">\n<thead>\n\n</thead>\n<tbody>\n<tr><td>Analysis of regression ERPs </td><td><a href=\"https://github.com/unfoldtoolbox/Unfold.jl/tree/main\"><picture>\n <source\nsrcset=\"assets/300w/logo_Unfold.jl-dark.png\",alt=\"Unfold.jl Logo dark\"\n   media=\"(prefers-color-scheme: dark)\"\n   class=\"h-[45vh] object-cover\"\n   />\n  <img\n src=\"assets/300w/logo_Unfold.jl.png\"\"\n   alt=\"Unfold.jl Logo bright\"\n   class=\"h-[45vh] object-cover\"          \n />\n</picture></a></td></tr> \n<tr><td>Mass Univariate Linear Mixed Models</td><td><a href=\"https://github.com/unfoldtoolbox/UnfoldMixedModels.jl\"><picture>\n <source\nsrcset=\"assets/300w/logo_UnfoldMixedModels.jl-dark.png\",alt=\"UnfoldMixedModels.jl Logo dark\"\n   media=\"(prefers-color-scheme: dark)\"\n   class=\"h-[45vh] object-cover\"\n   />\n  <img\n src=\"assets/300w/logo_UnfoldMixedModels.jl.png\"\"\n   alt=\"Unfold.jl Logo bright\"\n   class=\"h-[45vh] object-cover\"          \n />\n</picture></a></td></tr>\n<tr><td>Visualization of ERP/EEG data and Unfold models</td><td><a href=\"https://github.com/unfoldtoolbox/UnfoldMakie.jl\"><picture>\n <source\nsrcset=\"assets/300w/logo_UnfoldMakie.jl-dark.png\",alt=\"UnfoldMakie.jl Logo dark\"\n   media=\"(prefers-color-scheme: dark)\"\n   class=\"h-[45vh] object-cover\"\n   />\n  <img\n src=\"assets/300w/logo_UnfoldMakie.jl.png\"\"\n   alt=\"UnfoldMakie.jl Logo bright\"\n   class=\"h-[45vh] object-cover\"          \n />\n</picture></a></td></tr>\n<tr><td>Simulation of event-based EEG</td><td><a href=\"https://github.com/unfoldtoolbox/UnfoldSim.jl\"><picture>\n <source\nsrcset=\"assets/300w/logo_UnfoldSim.jl-dark.png\",alt=\"UnfoldSim.jl Logo dark\"\n   media=\"(prefers-color-scheme: dark)\"\n   class=\"h-[45vh] object-cover\"\n   />\n  <img\n src=\"assets/300w/logo_UnfoldSim.jl.png\"\"\n   alt=\"UnfoldSim.jl Logo bright\"\n   class=\"h-[45vh] object-cover\"          \n />\n</picture></a></td></tr>\n<tr><td>BIDS-pipeline support for Unfold.jl</td><td><a href=\"https://github.com/unfoldtoolbox/UnfoldBIDS.jl\"><picture>\n <source\nsrcset=\"assets/300w/logo_UnfoldBIDS.jl-dark.png\",alt=\"UnfoldBIDS.jl Logo dark\"\n   media=\"(prefers-color-scheme: dark)\"\n   class=\"h-[45vh] object-cover\"\n   />\n  <img\n src=\"assets/300w/logo_UnfoldBIDS.jl.png\"\"\n   alt=\"UnfoldBIDS.jl Logo bright\"\n   class=\"h-[45vh] object-cover\"          \n />\n</picture></a></td></tr>\n<tr><td>Decoding with overlap/covariate correction</td><td><a href=\"https://github.com/unfoldtoolbox/UnfoldDecode.jl\"><picture>\n <source\nsrcset=\"assets/300w/logo_UnfoldDecode.jl-dark.png\",alt=\"UnfoldDecode.jl Logo dark\"\n   media=\"(prefers-color-scheme: dark)\"\n   class=\"h-[45vh] object-cover\"\n   />\n  <img\n src=\"assets/300w/logo_UnfoldDecode.jl.png\"\"\n   alt=\"UnfoldDecode.jl Logo bright\"\n   class=\"h-[45vh] object-cover\"          \n />\n</picture></a></td></tr>\n<tr><td>Statistics for Unfold models</td><td><a href=\"https://github.com/unfoldtoolbox/UnfoldStats.jl\"><picture>\n <source\nsrcset=\"assets/300w/logo_UnfoldStats.jl-dark.png\",alt=\"UnfoldStats.jl Logo dark\"\n   media=\"(prefers-color-scheme: dark)\"\n   class=\"h-[45vh] object-cover\"\n   />\n  <img\n src=\"assets/300w/logo_UnfoldStats.jl.png\"\"\n   alt=\"UnfoldStats.jl Logo bright\"\n   class=\"h-[45vh] object-cover\"          \n />\n</picture></a></td></tr>\n\n</tr>\n</tbody>\n\n</table>\n</div>\n\n","category":"page"},{"location":"","page":"Unfold Ecosystem","title":"Unfold Ecosystem","text":"tipp: Tipp\nThe different packages can often be used independently from each other. Choose the functionality you require and have fun with one of the Getting Started tutorials!","category":"page"},{"location":"#Citing","page":"Unfold Ecosystem","title":"Citing","text":"","category":"section"},{"location":"","page":"Unfold Ecosystem","title":"Unfold Ecosystem","text":"Writing this software is an ongoing effort by many people. Please cite our tools when using them so that we can continue developing tools for the community!","category":"page"},{"location":"","page":"Unfold Ecosystem","title":"Unfold Ecosystem","text":"In general, please cite the current Zenodo version of the toolbox (to give credit to the current contributors and maintainers) and the published paper (to acknowledge the initial effort to start a tool).","category":"page"},{"location":"","page":"Unfold Ecosystem","title":"Unfold Ecosystem","text":"Unfold.jl: Zenodo DOI and published paper","category":"page"},{"location":"","page":"Unfold Ecosystem","title":"Unfold Ecosystem","text":"UnfoldMakie.jl: Zenodo DOI and published paper","category":"page"},{"location":"","page":"Unfold Ecosystem","title":"Unfold Ecosystem","text":"UnfoldSim.jl: Zenodo DOI","category":"page"},{"location":"","page":"Unfold Ecosystem","title":"Unfold Ecosystem","text":"UnfoldBIDS.jl: Zenodo DOI","category":"page"},{"location":"","page":"Unfold Ecosystem","title":"Unfold Ecosystem","text":"UnfoldStats.jl: Zenodo DOI","category":"page"},{"location":"","page":"Unfold Ecosystem","title":"Unfold Ecosystem","text":"UnfoldDecode.jl: no DOI yet","category":"page"}]
}
